#!/bin/bash
core_dir=/data/storage/corefiles
ERROR=65535
function getCoreNumofSingblade
{

  #echo $0 $1
  ssh $1 test -d $core_dir
  if [ $? -ne 0 ]; then 
  	#return 0
    echo $ERROR
  else
    core_file_num=`ssh $1 "ls $core_dir/ | grep core | wc -l"`
    echo $core_file_num
  fi 

  #core_file_num=`ssh $1 "ls $core_dir/ | grep core | wc -l"`
  #return $core_file_num
}
function checkCoreOnSingleBlade
{
	local index=$1
	local location=${ActiveBladeList_array[$index]}
	#getCoreNumofSingblade $location
	cur_core_file_num=`getCoreNumofSingblade $location`
#       echo "current value:$cur_core_file_num"
#       echo "previous value:$core_file_num"
        if [ $cur_core_file_num -eq $ERROR ]
        then
                return 0
        fi
        if [ ${ActiveBladeList_coreNum_array[$index]} -ge $cur_core_file_num ]
        then
                ActiveBladeList_coreNum_array[$index]=$cur_core_file_num
        else 
                diff_num=$(($cur_core_file_num - ${ActiveBladeList_coreNum_array[$index]}))

#               echo $diff_num
                ActiveBladeList_coreNum_array[$index]=$cur_core_file_num
                #echo "ssh $location 'ls -t $core_dir/core*'"
                core_array=`ssh $location "ls -t $core_dir/core*"`
                #echo $core_array
                for corefile in ${core_array[@]}
                do
                        base_corefile=`ssh $location "basename $corefile"`
                        #gdb_str=`ssh $location "gdb --batch -q $corefile 2>/dev/null | grep "Core was generated by""`
                        file_para=`ssh $location "ls -all $corefile"`
                        file_para_array=($file_para)
                        #echo ${file_para_array[0]}
                        wall "=====New Core Dump on Shelf-Slot:$location!!===== filename:$base_corefile; time:${file_para_array[5]} \
${file_para_array[6]} ${file_para_array[7]}"
                        diff_num=$(($diff_num - 1))
                #       echo $diff_num
                        if [ $diff_num -eq 0 ]
                        then
                                break
                        fi
                done
        fi
}

function checkDiskCapOnSingleBlade
{
  local index=$1
  local location=${ActiveBladeList_array[$index]}
  
  local tmp=`ssh $location df -P | grep /dev | awk '{print $5}' | sed 's/%//g'`
  while read singleDisk 
  do
    if [ $singleDisk -gt 95 ]
    then 
       wall "the disk of blade $location is nearlly full, >95% !!"
    fi
done <<EOF
$tmp
EOF
}


# If ADM is not active, then wait until it is up
AMStatus=`/usr/IMS/current/bin/readShm | grep " - AM" | awk '{print $7}' | grep "STATE_INS_ACTIVE"`
while [ 1 -eq 1 ] 
do                                                                                                                                                                                                                        
  #echo "this line:"$line                                                                                                                                                                                                 
  if [[ $AMStatus = "STATE_INS_ACTIVE" ]]
  then
    break
  else
    wall "ADM is not ACTIVE! The core check script won't work until ADM is active; Check again after 20 min"
    sleep 20
    AMStatus=`/usr/IMS/current/bin/readShm | grep " - AM" | awk '{print $7}' | grep "STATE_INS_ACTIVE"`
  fi
done

b_checkStandbyBlade=1

ActiveBladeList=""
StandbyBladeList=""
OosBladeList=""
tmp=`/usr/IMS/current/bin/readShm | grep -A 20 "Shelf-Slot" | grep -v "Shelf-Slot"`
while read line
do
  #echo "this line:"$line
  BladeStatus=`echo $line | awk '{print $7}'`
  ShelfSlot=`echo $line | awk '{print $1}'`
#  echo $BladeStatus $ShelfSlot
  case $BladeStatus in
    STATE_INS_ACTIVE)
       
       ActiveBladeList="$ActiveBladeList $ShelfSlot"
       ;;
 
    STATE_INS_STANDBY)
       StandbyBladeList="$StandbyBladeList $ShelfSlot"
       ;;
    STATE_OOS)
       OosBladeList="$OosBladeList $ShelfSlot"
       ;;   
    *)
       
       ;;
  esac
done <<EOF
$tmp
EOF

CheckedBladeList="$ActiveBladeList $StandbyBladeList"
#echo "the blade list to check is: " $CheckedBladeList

ActiveBladeList_array=($CheckedBladeList)
activeLength=${#ActiveBladeList_array[*]}



i=0
while [ $i -lt $activeLength ] 
do

num=`getCoreNumofSingblade ${ActiveBladeList_array[$i]}`
ActiveBladeList_coreNum_array[i]=$num
let i++
done
#echo "########################"
#echo ${ActiveBladeList_array[@]}
#echo ${ActiveBladeList_coreNum_array[@]}
while [ 1 -eq 1 ]
do
    sleep 5
    i=0
    while [ $i -lt $activeLength ] 
    do
#getCoreNumofSingblade ${ActiveBladeList_array[$i]}
    checkCoreOnSingleBlade $i
    checkDiskCapOnSingleBlade $i
    let i++
    done
    #echo "########################"
    #echo ${ActiveBladeList_array[@]}
    #echo ${ActiveBladeList_coreNum_array[@]}
done
